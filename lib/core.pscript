module core;

extern Int strcmp(Str a, Str b);
extern Void strcpy(Str d, Str s);
extern Void strcat(Str d, Str s);
extern Void sprintf(Str d, Str f, Int i);

// STRING

model String {
	Str toString();
}

extend Str with String {
	Str toString() {
		return this;
	}
}

extend Int with String {
	Str toString() {
		var str = new Char*(20);
		sprintf(str, "%d", this);
		return str;
	}
}

extend Bool with String {
	Str toString() {
		if (this) return "true";
		else return "false";
	}
}

extend Array<@T> with String {
	Str toString() {
		var str = "[";
		var i = 0;
		for (item in this) {
			if (i != 0) str = str ++ ", ";
			str = str ++ item;
			i = i + 1;
		}
		return str ++ "]";
	}
}

// EQ

model Eq<@T> {
	Bool operator ==(@T t);
	Bool operator !=(@T t);
}

extend Str with Eq<String> {
	Bool operator ==(String t) {
		return strcmp(this, t.toString()) == 0;
	}
	Bool operator !=(String t) {
		return strcmp(this, t.toString()) != 0;
	}
}

extend String with Eq<String> {
	Bool operator ==(String t) {
		return this.toString() == t;
	}
	Bool operator !=(String t) {
		return this.toString() != t;
	}
}

extend Array<@T> with Eq<Array<@T>> {
	Bool operator ==(@T[] t) {
		if (this.len != t.len) return false;
		for (i in [0 .. this.len-1]) {
			if (this[i] != t[i]) return false;
		}
		return true;
	}
	Bool operator !=(@T[] t) {
		return !(this == t);
	}
}

// SUMMABLE

model Summable<@T> {
	$ operator ++(@T t);
	@T sumIdentity();
}

extend String with Summable<String> {
	String operator ++(String t) {
		return this.toString() ++ t;
	}
	
	String sumIdentity() {
		return this.sumIdentity();
	}
}

extend Str with Summable<String> {
	Str operator ++(String t) {
		var newString = new Char*(this.size()+t.size()+1);
		strcpy(newString, this);
		strcat(newString, t.toString());
		return newString;
	}
	String sumIdentity() {
		return "";
	}
}

extend Array<@T> with Summable<Array<@T>> {
	Array<@T> operator ++(Array<@T> a) {
		var arr = new @T[this.len + a.len];
		var i = 0;
		for (v in this) {
			arr[i] = v;
			i = i + 1;
		}
		for (v in a) {
			arr[i] = v;
			i = i + 1;
		}
		return arr;
	}
	Array<@T> sumIdentity() {
		return new @T[0];
	}
}

// HASSIZE

extern Int strlen(Str s);

model HasSize {
	Int size();
}

extend String with HasSize {
	Int size() {
		return this.toString().size();
	}
}

extend Str with HasSize {
	Int size() {
		return strlen(this);
	}
}

extend Array<@T> with HasSize {
	Int size() {
		return this.len;
	}
}

// APPENDABLE

model Appendable<@T> {
	$ append(@T element);
}

extend Array<@T> with Appendable<@T> {
	@T[] append(@T item) {
		var newArray = new @T[this.len+1];
		for (i in [0 .. this.len-1]) {
			newArray[i] = this[i];
		}
		newArray[this.len] = item;
		return newArray;
	}
}

// PIPES

model Iterator<@T> : StreamSource<@T> {
	@T next();
	Bool hasNext();
}

struct ArrayIterator<@T> {
	@T[] elements;
	Int location;
}

extend ArrayIterator<@T> with Iterator<@T> {
	@T next() {
		this.location = this.location + 1;
		return this.elements[this.location - 1];
	}
	Bool hasNext() {
		return this.location < this.elements.len;
	}
}

const struct MappingIterator<@From, @To> {
	@From -> @To mappingFunction;
	Iterator<@From> source;
}

extend MappingIterator<@F, @T> with Iterator<@T> {
	@T next() {
		return this.mappingFunction.call(this.source.next());
	}
	Bool hasNext() {
		return this.source.hasNext();
	}
}

model StreamSource<@T> {
	Iterator<@T> iterator();
}

extend Iterator<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

extend ArrayIterator<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

extend MappingIterator<@F, @T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

extend Array<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return new ArrayIterator<@T> { this, 0 };
	}
}

model StreamOperation<@T, @U> {
	@U operator |(StreamSource<@T> source);
}

extend Func<@R, @P> with StreamOperation<@P, StreamSource<@R>> {
	StreamSource<@R> operator |(StreamSource<@P> source) {
		return new MappingIterator<@P, @R> { this, source.iterator() };
	}
}

const struct Forall<@T> {
	@T->Void callback;
}

extend Forall<@T> with StreamOperation<@T, Void> {
	Void operator |(StreamSource<@T> source) {
		var i = source.iterator();
		while (i.hasNext()) {
			this.callback.call(i.next());
		}
	}
}

StreamOperation<@T, Void> forAll<@T>(@T->Void callback) {
	return new Forall<@T> { callback };
}

struct Fold<@T, @U> {
	@U collection;
	(@U, @T)->@U collector;
}

extend Fold<@T, @U> with StreamOperation<@T, @U> {
	@U operator |(StreamSource<@T> source) {
		var i = source.iterator();
		while (i.hasNext()) {
			this.collection = this.collector.call(this.collection, i.next());
		}
		return this.collection;
	}
}

StreamOperation<@T, @U> fold<@T, @U>(@U collection, (@U, @T)->@U collector) {
	return new Fold<@T, @U> { collection, collector };
}

// CONTAINER

model Container<@T> : StreamSource<@T> {
	Bool contains(@T value);
}

extend Array<@T> with Container<@T> {
	Bool contains(@T value) {
		for (item in this) {
			if (item == value) return true;
		}
		return false;
	}
}

// LIST

model List<@T> : HasSize, Container<@T> {
	@T operator [] (Int index);
	Void operator []= (Int index, @T value);
	Void add(@T value);
	@T remove(Int index);
}

// ARRAYLIST

struct ArrayList<@T> {
	@T[] elements;
}

extend ArrayList<@T> with HasSize {
	Int size() {
		return this.elements.size();
	}
}

extend ArrayList<@T> with String {
	Str toString() {
		return "ArrayList { " ++ this.elements ++ " }";
	}
}

extend ArrayList<@T> with Eq<ArrayList<@T>> {
	Bool operator ==(ArrayList<@T> al) {
		return this.elements == al.elements;
	}
	Bool operator !=(ArrayList<@T> al) {
		return this.elements != al.elements;
	}
}

extend ArrayList<@T> with Container<@T> {
	Bool contains(@T value) {
		return this.elements.contains(value);
	}
}

extend ArrayList<@T> with List<@T> {
	@T operator [](Int index) {
		return this.elements[index];
	}
	Void operator []=(Int index, @T value) {
		this.elements[index] = value;
	}
	Void add(@T value) {
		this.elements = this.elements.append(value);
	}
	@T remove(Int index) {
		var t = this[index];
		var arr = new @T[this.size()-1];
		var i = 0;
		for (v in this.elements) {
			if (i < index)
				arr[i] = v;
			else if (i > index)
				arr[i-1] = v;
			i = i + 1;
		}
		this.elements = arr;
		return t;
	}
}

extend ArrayList<@T> with Summable<ArrayList<@T>> {
	ArrayList<@T> operator ++(ArrayList<@T> l) {
		return new ArrayList<@T> { this.elements ++ l.elements };
	}
	
	ArrayList<@T> sumIdentity() {
		return new ArrayList<@T> { this.elements.sumIdentity() };
	}
}

extend ArrayList<@T> with Appendable<@T> {
	ArrayList<@T> append(@T value) {
		return new ArrayList<@T> { this.elements.append(value) };
	}
}

extend ArrayList<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return new ArrayIterator<@T> { this.elements, 0 };
	}
}

// MAYBE

enum Maybe<@T> {
	Just(@T),
	Nothing
}

Maybe<@T> just<@T>(@T value) {
	return new Maybe<@T>::Just(value);
}

extend Maybe<@T> with Eq<Maybe<@T>> {
	Bool operator ==(Maybe<@T> al) {
		match (this) {
			Just(v1) -> match (al) {
				Just(v2) -> return true;
			}
			Nothing -> match (al) {
				Nothing -> return true;
			}
		}
		return false;
	}
	Bool operator !=(Maybe<@T> al) {
		return !(this == al);
	}
}

extend Maybe<@T> with Container<@T> {
	Bool contains(@T value) {
		match (this) {
			Just(v) -> return v == value;
		}
		return false;
	}
}

extend Maybe<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		match (this) {
			Just(v) -> return new ArrayIterator<@T> { [v], 0 };
		}
		return new ArrayIterator<@T> { new @T[0], 0 };
	}
}
