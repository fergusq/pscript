module core;

extern import "stdlib.h";

extern Int strcmp(Str a, Str b);
extern Void strcpy(Str d, Str s);
extern Void strcat(Str d, Str s);
extern Void sprintf(Str d, Str f, Int i);

// STRING

[doc("All types that have a string representation should implement this model.")]
model String {
	[doc("Returns the string representation of the value.")]
	Str toString();
}

extend Str with String {
	Str toString() {
		return this;
	}
}

extend Int with String {
	Str toString() {
		var str = new Char*(20);
		sprintf(str, "%d", this);
		return str;
	}
}

extend Char with String {
	Str toString() {
		var str = new Char*(2);
		str[0] = this;
		return str;
	}
}

extend Bool with String {
	Str toString() {
		if (this) return "true";
		else return "false";
	}
}

extend Array<@T> with String {
	Str toString() {
		var str = "[";
		var i = 0;
		for (item in this) {
			if (i != 0) str = str ++ ", ";
			str = str ++ item;
			i = i + 1;
		}
		return str ++ "]";
	}
}

[doc("Converts values of type String to values of type Char[].")]
Char[] stringToArray(String str) {
	return new Array<Char> { str.size(), str.toString() as Char* }.copy();
}

// EQ

[doc("Note: <tt>@T</tt> should be <tt>$</tt>.")]
model Eq<@T> {
	Bool operator ==(@T t);
	Bool operator !=(@T t);
}

extend Str with Eq<Str> {
	Bool operator ==(Str t) {
		return strcmp(this, t) == 0;
	}
	Bool operator !=(Str t) {
		return strcmp(this, t) != 0;
	}
}

extend String with Eq<String> {
	Bool operator ==(String t) {
		return this.toString() == t.toString();
	}
	Bool operator !=(String t) {
		return this.toString() != t.toString();
	}
}

extend Array<@T> with Eq<Array<@T>> {
	Bool operator ==(@T[] t) {
		if (this.len != t.len) return false;
		for (i in [0 .. this.len-1]) {
			if (this[i] != t[i]) return false;
		}
		return true;
	}
	Bool operator !=(@T[] t) {
		return !(this == t);
	}
}

// SUMMABLE

[doc("If all instances of a type
<ol>
<li>are collections,</li>
<li>have finite but unlimited size,</li>
<li>contain only existing values,</li>
<li>can contain values in any arbitrary combinations and</li>
<li>new arbitrary instances can be easily created,</li>
</ol>
then the type should implement this model.

<tt>@T</tt> should be either <tt>$</tt> or a generalization of <tt>$</tt>.")]
model Summable<@T> {
	[doc("Returns the union of two collections. This method does not modify <tt>this</tt> or <tt>t</tt>.")]
	$ operator ++(@T t);
	@T sumIdentity();
}

extend String with Summable<String> {
	String operator ++(String t) {
		return this.toString() ++ t;
	}
	
	String sumIdentity() {
		return this.sumIdentity();
	}
}

extend Str with Summable<String> {
	Str operator ++(String t) {
		var newString = new Char*(this.size()+t.size()+1);
		strcpy(newString, this);
		strcat(newString, t.toString());
		return newString;
	}
	String sumIdentity() {
		return "";
	}
}

extend Array<@T> with Summable<Array<@T>> {
	Array<@T> operator ++(Array<@T> a) {
		var arr = new @T[this.len + a.len];
		var i = 0;
		for (v in this) {
			arr[i] = v;
			i = i + 1;
		}
		for (v in a) {
			arr[i] = v;
			i = i + 1;
		}
		return arr;
	}
	Array<@T> sumIdentity() {
		return new @T[0];
	}
}

// HASSIZE

extern Int strlen(Str s);

[doc("If all instances of a type
<ol>
<li>are collections and</li>
<li>have finite but unlimited size,</li>
</ol>
then the type should implement this model.")]
model HasSize {
	[doc("Returns the size of the collection.")]
	Int size();
}

extend String with HasSize {
	Int size() {
		return this.toString().size();
	}
}

extend Str with HasSize {
	Int size() {
		return strlen(this);
	}
}

extend Array<@T> with HasSize {
	Int size() {
		return this.len;
	}
}

// APPENDABLE

[doc("If all instances of a type
<ol>
<li>are collections of type <tt>@T</tt>,</li>
<li>can contain any instance of <tt>@T</tt>,</li>
<li>can contain values in any arbitrary combinations and</li>
<li>new arbitrary instances can be easily created,</li>
</ol>
then the type should implement this model.")]
model Appendable<@T> : CopyCollector<@T> {
	[doc("Returns a new value of type <tt>$</tt> that is a copy of <tt>this</tt> but contains an additional element <tt>e</tt>.")]
	$ append(@T e);
}

extend Str with Appendable<Char> {
	Str append(Char chr) {
		return this ++ chr;
	}
}

extend Array<@T> with Appendable<@T> {
	@T[] append(@T item) {
		var newArray = new @T[this.len+1];
		for (i in [0 .. this.len-1]) {
			newArray[i] = this[i];
		}
		newArray[this.len] = item;
		return newArray;
	}
}

// PUSHABLE

[doc("All types that support <tt>push</tt> operation should implement this model.")]
model Pushable<@T> : Collector<@T> {
	[doc("The exact nature of this operation is left to be specified by implementing types, but it should at least
	not modify <tt>element</tt>.")]
	Void push(@T element);
}

// PIPES

[doc("This is the base model of all iterators.")]
model Iterator<@T> : StreamSource<@T> {
	[doc("Returns Just next value, if it is present, and Nothing otherwise.")]
	@T? next();
}

[doc("An iterator that iterates over elements of a given array. <tt>location</tt> is the first index to be iterated, usually zero.")]
struct ArrayIterator<@T> {
	@T[] elements;
	Int location;
}

extend ArrayIterator<@T> with Iterator<@T> {
	@T? next() {
		if (this.location < this.elements.len) {
			this.location = this.location + 1;
			return just(this.elements[this.location - 1]);
		}
		else {
			return nothing();
		}
	}
}

[doc("MappingIterator reads values from the source, applies them to a function, and returns the results.")]
const struct MappingIterator<@From, @To> {
	@From -> @To mappingFunction;
	Iterator<@From> source;
}

extend MappingIterator<@F, @T> with Iterator<@T> {
	@T? next() {
		match (this.source.next()) {
			Just(v) -> return just(this.mappingFunction.call(v));
		}
		return nothing();
	}
}

[doc("Filtering iterator reads values from the source and ignores the values that do not match to a condition.")]
const struct FilteringIterator<@T> {
	@T->Bool predicate;
	Iterator<@T> source;
}

extend FilteringIterator<@T> with Iterator<@T> {
	@T? next() {
		while (true) {
			match (this.source.next()) {
				Just(item) -> {
					if (this.predicate.call(item))
						return just(item);
				}
				Nothing -> break;
			}
		}
		return nothing();
	}
}

[doc("Limiting iterator iterates over certain number of first elements in the source.")]
struct LimitingIterator<@T> {
	Int limit;
	Iterator<@T> source;
	Int position;
}

extend LimitingIterator<@T> with Iterator<@T> {
	@T? next() {
		if (this.position >= this.limit)
			return nothing();
		this.position = this.position + 1;
		return this.source.next();
	}
}

[doc("All collection types (finite or infinite) should implement this model.
Is used to convert a collection to an iterator.")]
model StreamSource<@T> {
	[doc("Returns an iterator that represents all values of the collection. Depending on the implementation, this method
	may or may not remove the returned values from the collection.")]
	Iterator<@T> iterator();
}

extend Iterator<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

//forall $ : Iterator<@T> extend $ with StreamSource<@T> {
//	Iterator<@T> iterator() {
//		return this;
//	}
//}

extend ArrayIterator<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

extend MappingIterator<@F, @T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

extend FilteringIterator<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

extend LimitingIterator<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return this;
	}
}

extend Array<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return new ArrayIterator<@T> { this, 0 };
	}
}

extend Str with StreamSource<Char> {
	Iterator<Char> iterator() {
		return stringToArray(this).iterator();
	}
}

// STREAM OPERATION

[doc("Represents a function or other kind of object that uses values in an iterator to perform a specific operation.
<tt>@T</tt> is the type of values in the iterator and <tt>@U</tt> is the return type of the operation.
<br/><br/>
Stream operations can be chained to form a pipeline. Most operations are performed lazily and if the last operation in
the chain is lazy, then the entire chain probably won't do anything at all.
<br/><br/>
A typical chain has one <i>source</i> and one or more <i>operations</i>. The last operation, as noted above, should not be lazy
and generally should return something (other than StreamSource).
<pre>
source | operation | endoperation
</pre>
<br/>
Example:
<pre>
var array = [\"Banana\", \"Apple\", \"Peach\"];
var toQuestion = (Str fruit) -> Str {
	return \"Do you like to eat the \" ++ fruit ++ \"?\";
};
var printIt = (Str s) -> Void { puts(s); };
array	| toQuestion
	| sort()
	| forEach(printIt);
</pre>
<br/>
<table>
<caption>Usual operations</caption>
<tr><th>Name</th><th>Description</th><th>Lazy</th><th>Return value</th></tr>
<tr><td>(map)</td>
    <td>All lambdas (Func&lt;@U, @T&gt; values) can be used as mapping operations.</td>
    <td>Yes</td>
    <td>StreamSource&lt;@U&gt;</td></tr>
<tr><td><tt><a href='#f_filter'>filter(cond)</a></tt></td>
    <td>Removes values from the stream if they do not fulfill a condition.</td>
    <td>Yes</td>
    <td>StreamSource&lt;@T&gt;</td></tr>
<tr><td><tt><a href='#f_limit'>limit(n)</a></tt></td>
    <td>Lets <tt>n</tt> first values in the stream pass through and discards all other values.</td>
    <td>Yes</td>
    <td>StreamSource&lt;@T&gt;</td></tr>
<tr><td><tt><a href='#f_sort'>sort()</a></tt></td>
    <td>Reads all values from the stream, sorts them and returns a new stream.</td>
    <td>No</td>
    <td>StreamSource&lt;@T&gt;</td></tr>
<tr><td><tt><a href='#f_forEach'>forEach(func)</a></tt></td>
    <td>Calls a lambda function for each value in the stream.</td>
    <td>No</td>
    <td>Void</td></tr>
<tr><td><tt><a href='#f_fold'>fold(firstValue, func)</a></tt></td>
    <td>Creates a new value by applying a binary function to <tt>firstValue</tt> and all values in the stream, eg.
        if the stream contains values <tt>v1</tt>, <tt>v2</tt> and <tt>v3</tt>, then this operation returns
        <tt>func(func(func(firstValue, v1), v2), v3)</tt>.</td>
    <td>No</td>
    <td>Void</td></tr>
<tr><td><tt><a href='#fm_Collector_collect'>collection.collect()</a></tt></td>
    <td>If <tt>collection</tt> is a value of type @U which implements Collector, then it has
        method <tt>.collect()</tt> that pushes all values in the stream to the collection.</td>
    <td>No</td>
    <td>@U</td></tr>
<tr><td><tt><a href='#fm_CopyCollector_collect'>collection.collectToCopy()</a></tt></td>
    <td>If <tt>collection</tt> is a value of type @U which implements CopyCollector, then it has
        method <tt>.collectToCopy()</tt> that creates a copy of the collection with values of
        the stream appended.</td>
    <td>No</td>
    <td>@U</td></tr>
</table>")]
model StreamOperation<@T, @U> {
	[doc("Performs the operation.")]
	@U operator |(StreamSource<@T> source);
}

extend Func<@R, @P> with StreamOperation<@P, StreamSource<@R>> {
	StreamSource<@R> operator |(StreamSource<@P> source) {
		return new MappingIterator<@P, @R> { this, source.iterator() };
	}
}

[doc("Acts as a blueprint for creating FilteringIterator objects. Can be used as a StreamOperation. See the <tt>filter</tt> function.")]
const struct Filter<@T> {
	@T->Bool predicate;
}

extend Filter<@T> with StreamOperation<@T, StreamSource<@T>> {
	StreamSource<@T> operator |(StreamSource<@T> source) {
		return new FilteringIterator<@T> { this.predicate, source.iterator() };
	}
}

[doc("Returns a StreamOperation object that returns a new StreamSource object that contains only those values that
satisfy the given condition.")]
StreamOperation<@T, StreamSource<@T>> filter<@T>(@T->Bool predicate) {
	return new Filter<@T> { predicate };
}

[doc("Acts as a blueprint for creating LimitingIterator objects. Can be used as a StreamOperation. See the <tt>limit</tt> function.")]
const struct Limit<@T> {
	Int limit;
}

extend Limit<@T> with StreamOperation<@T, StreamSource<@T>> {
	StreamSource<@T> operator |(StreamSource<@T> source) {
		return new LimitingIterator<@T> { this.limit, source.iterator(), 0 };
	}
}

[doc("Returns a StreamOperation object that returns a new StreamSource object that contains only <tt>n</tt> first values.")]
StreamOperation<@T, StreamSource<@T>> limit<@T>(Int n) {
	return new Limit<@T> { n };
}

[doc("Can be used as a StreamOperation that applies all values in the stream to the given function. See the <tt>forEach</tt> function.")]
const struct Foreach<@T> {
	@T->Void callback;
}

extend Foreach<@T> with StreamOperation<@T, Void> {
	Void operator |(StreamSource<@T> source) {
		var i = source.iterator();
		while (true) {
			match (i.next()) {
				Just(v) -> this.callback.call(v);
				Nothing -> break;
			}
		}
	}
}

[doc("Returns a new StreamOperation object that applies the given function to each value in the source.
<br/><br/>
Example:
<pre>
[1 .. 100]
	| (Int i) -> Int {
		return i*i;
	}
	| forEach((Int i) -> Void {
		println(i);
	});
</pre>
")]
StreamOperation<@T, Void> forEach<@T>(@T->Void callback) {
	return new Foreach<@T> { callback };
}

[doc("Can be used as a StreamOperation that constructs a new object from the values in the stream. See the <tt>fold</tt> function.")]
struct Fold<@T, @U> {
	@U collection;
	(@U, @T)->@U collector;
}

extend Fold<@T, @U> with StreamOperation<@T, @U> {
	@U operator |(StreamSource<@T> source) {
		var i = source.iterator();
		while (true) {
			match (i.next()) {
				Just(v) -> this.collection = this.collector.call(this.collection, v);
				Nothing -> break;
			}
		}
		return this.collection;
	}
}

[doc("Returns a StreamOperation object that may be used to 'fold' all values in the source into one value.
<br/><br/>
Example:
<pre>
var list = [1 .. 10];
var sum = list | fold(0, (Int sum, Int i) -> Int {
	return sum + i;
});
</pre>
")]
StreamOperation<@T, @U> fold<@T, @U>(@U collection, (@U, @T)->@U collector) {
	return new Fold<@T, @U> { collection, collector };
}

[doc("Creates a new collection from all values in the source by appending (with Appendable.append) them sequentially to a collection.
<br/><br/>
The standard implementation is:
<pre>StreamOperation<@T, @U> appendTo<@T, @U>(@U collection) {
	return fold(collection, (@U u, @T t) -> @U { return u.append(t); });
}</pre>")]
StreamOperation<@T, @U> appendTo<@T, @U>(@U collection) {
	return fold(collection, (@U u, @T t) -> @U { return u.append(t); });
}

[doc("Pushes all values in the source to a collection.")]
StreamOperation<@T, @U> pushTo<@T, @U>(@U collection) {
	return fold(collection, (@U u, @T t) -> @U { u.push(t); return u; });
}

// SORT

[doc("Can be used as a StreamOperation that sorts the values in the stream. See the <tt>sort</tt> function.")]
const struct Sort<@T> {}

extend Sort<@T> with StreamOperation<@T, StreamSource<@T>> {
	StreamSource<@T> operator |(StreamSource<@T> source) {
		var list = source | new ArrayList<@T> { [] }.collect();
		sortList(list);
		return list;
	}
}

[doc("Returns a StreamOperation that reads all values from the source, sorts them and returns a new source.")]
StreamOperation<@T, StreamSource<@T>> sort<@T>() {
	return new Sort<@T> {};
}

[doc("Sorts the given collection using methods <tt>operator &gt;</tt>, <tt>operator []</tt>, <tt>operator []=</tt> and <tt>size</tt>.
The models List, MutableList and HasSize declare this functionality for the collection.")]
Void sortList<@T>(@T list) {
	while (true) {
		var isSorted = true;
		for (i in [0 .. list.size()-2]) {
			if (list[i] > list[i+1]) {
				var tmp = list[i];
				list[i] = list[i+1];
				list[i+1] = tmp;
				isSorted = false;
			}
		}
		if (isSorted) break;
	}
}

// COLLECTOR

[doc("A Collector is a type of collection that can 'collect', i.e. read values from the stream source and push them to itself.
The method used may or may not be Pushable.push and the collection may or may not be modified during the process, but this
is the most common case.
<br/><br/>
Example:
<pre>
var list = new ArrayList<Int> { new Int[0] };
var cond = (Int i) -> Bool { return i%2==0; };
[1 .. 100] | filter(cond) | list.collect();
</pre>")]
model Collector<@T> {
	[doc("Returns a StreamOperation object that reads values from the source and pushes them to the collection.
	The operation returns the collection after the last push.
	<br/>
	<br/>
	The recommended implementation is
	<pre>StreamOperation<@T, $> collect() {
	return pushTo::<@T, $>(this);
}</pre>")]
	StreamOperation<@T, $> collect();
}

extend Str with CopyCollector<Char> {
	StreamOperation<Char, Str> collectToCopy() {
		return appendTo::<Char, Str>(this);
	}
}

extend Array<@T> with CopyCollector<@T> {
	StreamOperation<@T, Array<@T>> collectToCopy() {
		return appendTo::<@T, Array<@T>>(this);
	}
}

[doc("A variant of Collector that specifically does not modify the collection, but returns a copy.
<br/><br/>
Example:
<pre>
var cond = (Int i) -> Bool { return i%2==0; };
var evenNumbers = [1 .. 100]
	| filter(cond)
	| new Int[0].collectToCopy();
</pre>")]
model CopyCollector<@T> {
	[doc("Returns a StreamOperation object that reads values from the source and appends them to a copy of the collection.
	The operation returns a copy of the collection after the last append.
	<br/>
	<br/>
	The recommended implementation is
	<pre>StreamOperation<@T, $> collect() {
	return appendTo::<@T, $>(this);
}</pre>")]
	StreamOperation<@T, $> collectToCopy();
}

extend CopyCollector<@T> with Collector<@T> {
	StreamOperation<@T, $> collect() {
		return this.collectToCopy();
	}
}

// COPYABLE

[doc("All mutable types that support copying, i.e. to prevent mutation of the original object, should implement this model.")]
model Copyable {
	[doc("Returns a copy of the <tt>this</tt> object that may be modified without modifying the original object. Possible
	pointers the object contains are however left unchanged, so mutating them changes them in the original object too.")]
	$ copy();
}

extend Array<@T> with Copyable {
	@T[] copy() {
		var newList = new @T[this.size()];
		for (i in [0 .. this.size()-1]) {
			newList[i] = this[i];
		}
		return newList;
	}
}

// CONTAINER

[doc("A type of collection that supports the <tt>contains</tt> method.
<br/>
If all instances of a type
<ol>
<li>are collections of type <tt>@T</tt>,</li>
<li>have finite size and</li>
<li>contain only existing values,</li>
</ol>
then the type should implement this model.")]
model Container<@T> : Eq<$>, StreamSource<@T> {
	[doc("Returns <tt>true</tt> if and only if the collection contains the given value, compared with operator <tt>==</tt>.")]
	Bool contains(@T value);
}

extend Str with Container<Char> {
	Bool contains(Char value) {
		return this | fold(false, (Bool contains, Char chr) -> Bool {
			return contains || chr == value;
		});
	}
}

extend Array<@T> with Container<@T> {
	Bool contains(@T value) {
		for (item in this) {
			if (item == value) return true;
		}
		return false;
	}
}

// STACK

[doc("A data structure that supports the First In Last Out -rule: the <tt>pop</tt> method should remove the element that
the latest call to <tt>push</tt> added to the collection.")]
model Stack<@T> : Pushable<@T> {
	[doc("Removes and returns the most recently added element from the collection.")]
	@T pop();
}

// QUEUE

[doc("A data structure that supports the First In First Out -rule: the <tt>pull</tt> method should remove the element that
has been longest in the collection.")]
model Queue<@T> : Pushable<@T> {
	[doc("Removes and returns the most early added element from the collection.")]
	@T pull();
}

// LIST

[doc("If all instances of a type satisfy that
<ol>
<li>they are collections of type <tt>@T</tt>, (Container 1)</li>
<li>they have finite and unlimited size, (HasSize 2)</li>
<li>they contain only existing values and (Container 3)</li>
<li>the values have a certain order in a way that each value is paired with an ordinal number,</li>
</ol>
then the type should implement this model.")]
model List<@T> : HasSize, Container<@T> {
	[doc("Returns the value that is located in the given position in the list.")]
	@T operator [](Int index);
}

extend Str with List<Char> {
	[SuppressWarnings]
	Char operator [](Int index) {
		return (this as Char*)[index];
	}
}

[doc("If all instances of a type satisfy that
<ol>
<li>they are collections of type <tt>@T</tt>, (Container 1)</li>
<li>they have finite and unlimited size, (HasSize 2)</li>
<li>they contain only existing values, (Container 3)</li>
<li>the values have a certain order in a way that each value is paired with an ordinal number and (List 4)</li>
<li>any value associated with an arbitrary ordinal number can be removed
    and replaced with a new value with the same number without changing the order of other values,</li>
</ol>
then the type should implement this model.")]
model MutableList<@T> : List<@T> {
	[doc("Replaces the value in the given position in the list with the given value.")]
	Void operator []=(Int index, @T value);
}

extend Array<@T> with List<@T> {
	[SuppressWarnings]
	@T operator [](Int index) {
		return this.ptr[index];
	}
}

extend Array<@T> with MutableList<@T> {
	[SuppressWarnings]
	Void operator []=(Int index, @T value) {
		this.ptr[index] = value;
	}
}

// VARIABLE-SIZE LIST

[doc("If all instances of a type satisfy that
<ol>
<li>they are collections of type <tt>@T</tt>, (Container 1)</li>
<li>they have finite and unlimited size, (HasSize 2)</li>
<li>they contain only existing values, (Container 3)</li>
<li>the values have a certain order in a way that each value is paired with an ordinal number, (List 4)</li>
<li>any value associated with an arbitrary ordinal number can be removed
    and replaced with a new value with the same number without changing the order of other values, (MutableList 5)</li>
<li>given an ordinal number, a new value can be added and associated with that number with all values associated with
    a greater or equal number having their number incremented by one and</li>
<li>given an ordinal number, the value with associated with that number can be removed with all values with greater number having
    their number decreased by one,</li>
</ol>
then the type should implement this model.")]
model VariableSizeList<@T> : List<@T>, Stack<@T>, Queue<@T> {
	Void add(Int index, @T value);
	@T remove(Int index);
}

// ARRAYLIST

[doc("An array with mutable size.")]
struct ArrayList<@T> {
	@T[] elements;
}

extend ArrayList<@T> with HasSize {
	Int size() {
		return this.elements.size();
	}
}

extend ArrayList<@T> with String {
	Str toString() {
		return "ArrayList { " ++ this.elements ++ " }";
	}
}

extend ArrayList<@T> with Eq<ArrayList<@T>> {
	Bool operator ==(ArrayList<@T> al) {
		return this.elements == al.elements;
	}
	Bool operator !=(ArrayList<@T> al) {
		return this.elements != al.elements;
	}
}

extend ArrayList<@T> with Container<@T> {
	Bool contains(@T value) {
		return this.elements.contains(value);
	}
}

extend ArrayList<@T> with List<@T> {
	@T operator [](Int index) {
		return this.elements[index];
	}
}

extend ArrayList<@T> with MutableList<@T> {
	Void operator []=(Int index, @T value) {
		this.elements[index] = value;
	}
}

extend ArrayList<@T> with Pushable<@T> {
	Void push(@T value) {
		this.elements = this.elements.append(value);
	}
}

extend ArrayList<@T> with Stack<@T> {
	@T pop() {
		return this.remove(this.size()-1);
	}
}

extend ArrayList<@T> with Queue<@T> {
	@T pull() {
		return this.remove(0);
	}
}

extend ArrayList<@T> with VariableSizeList<@T> {
	Void add(Int index, @T value) {
		var arr = new @T[this.size()+1];
		var i = 0;
		for (v in this.elements) {
			if (i < index)
				arr[i] = v;
			else if (i == index) {
				arr[i] = value;
				arr[i+1] = v;
			} else if (i > index)
				arr[i+1] = v;
			i = i + 1;
		}
		this.elements = arr;
	}
	@T remove(Int index) {
		var t = this[index];
		var arr = new @T[this.size()-1];
		var i = 0;
		for (v in this.elements) {
			if (i < index)
				arr[i] = v;
			else if (i > index)
				arr[i-1] = v;
			i = i + 1;
		}
		this.elements = arr;
		return t;
	}
}

extend ArrayList<@T> with Summable<ArrayList<@T>> {
	ArrayList<@T> operator ++(ArrayList<@T> l) {
		return new ArrayList<@T> { this.elements ++ l.elements };
	}
	
	ArrayList<@T> sumIdentity() {
		return new ArrayList<@T> { this.elements.sumIdentity() };
	}
}

extend ArrayList<@T> with Appendable<@T> {
	ArrayList<@T> append(@T value) {
		return new ArrayList<@T> { this.elements.append(value) };
	}
}

extend ArrayList<@T> with CopyCollector<@T> {
	StreamOperation<@T, ArrayList<@T>> collectToCopy() {
		return appendTo::<@T, ArrayList<@T>>(this);
	}
}

extend ArrayList<@T> with Collector<@T> {
	StreamOperation<@T, ArrayList<@T>> collect() {
		return pushTo::<@T, ArrayList<@T>>(this);
	}
}

extend ArrayList<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		return new ArrayIterator<@T> { this.elements, 0 };
	}
}

extend ArrayList<@T> with Copyable {
	ArrayList<@T> copy() {
		return new ArrayList<@T> { this.elements.copy() };
	}
}

// OPTIONAL

[doc("Optional provides an interface for the Maybe enum.")]
model Optional<@T> : Container<@T> {
	[doc("Returns the value in the <tt>this</tt> object if it is present and the argument value otherwise.")]
	@T orElse(@T value);
	[doc("Returns the value in the <tt>this</tt> object if it is present. Otherwise calls the argument function and returns its value.")]
	@T orElseGet(()->@T getter);
	Bool isPresent();
}

// MAYBE

[doc("Represents an object that may or may not be present.")]
enum Maybe<@T> {
	Just(@T),
	Nothing
}

[doc("Returns <tt>new Maybe<@T>::Just(value)</tt>. The difference from using the constructor direct is that
the compiler can infer the type parameter <tt>@T</tt> when calling a function.")]
Maybe<@T> just<@T>(@T value) {
	return new Maybe<@T>::Just(value);
}

[doc("Returns <tt>new Maybe<@T>::Nothing()</tt>. The difference from using the constructor direct is that
the compiler can infer the type parameter <tt>@T</tt> when calling a function.")]
Maybe<@T> nothing<@T>() {
	return new Maybe<@T>::Nothing();
}

extend Maybe<@T> with Eq<Maybe<@T>> {
	Bool operator ==(Maybe<@T> al) {
		match (this) {
			Just(v1) -> match (al) {
				Just(v2) -> return true;
			}
			Nothing -> match (al) {
				Nothing -> return true;
			}
		}
		return false;
	}
	Bool operator !=(Maybe<@T> al) {
		return !(this == al);
	}
}

extend Maybe<@T> with Container<@T> {
	Bool contains(@T value) {
		match (this) {
			Just(v) -> return v == value;
		}
		return false;
	}
}

extend Maybe<@T> with StreamSource<@T> {
	Iterator<@T> iterator() {
		match (this) {
			Just(v) -> return new ArrayIterator<@T> { [v], 0 };
		}
		return new ArrayIterator<@T> { new @T[0], 0 };
	}
}

extend Maybe<@T> with Optional<@T> {
	@T orElse(@T value) {
		match (this) {
			Just(v) -> return v;
		}
		return value;
	}
	
	@T orElseGet(()->@T getter) {
		match (this) {
			Just(v) -> return v;
		}
		return getter.call();
	}
	
	Bool isPresent() {
		match (this) {
			Just(v) -> return true;
		}
		return false;
	}
}

// RESULT

enum Result<@T, @E> {
	Ok(@T),
	Error(@E)
}

Result<@T, @E> ok<@T, @E>(@T value) {
	return new Result<@T, @E>::Ok(value);
}

Result<@T, @E> error<@T, @E>(@E value) {
	return new Result<@T, @E>::Error(value);
}

extend Result<@T, @E> with StreamSource<@T> {
	Iterator<@T> iterator() {
		match (this) {
			Ok(v) -> return [v].iterator();
		}
		return new @T[0].iterator();
	}
}

extend Result<@T, @E> with Eq<Result<@T, @E>> {
	Bool operator ==(Result<@T, @E> result) {
		match (this) {
			Ok(v1) -> match (result) {
				Ok(v2) -> return v1 == v2;
			}
		}
		return false;
	}
	Bool operator !=(Result<@T, @E> result) {
		return !(this == result);
	}
}

extend Result<@T, @E> with Container<@T> {
	Bool contains(@T value) {
		match (this) {
			Ok(v) -> return value == v;
		}
		return false;
	}
}

extend Result<@T, @E> with Optional<@T> {
	@T orElse(@T value) {
		match (this) {
			Ok(v) -> return v;
		}
		return value;
	}
	
	@T orElseGet(()->@T getter) {
		match (this) {
			Ok(v) -> return v;
		}
		return getter.call();
	}
	
	Bool isPresent() {
		match (this) {
			Ok(v) -> return true;
		}
		return false;
	}
}
