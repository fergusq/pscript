function startsWith(needle, haystack) {
	return #haystack >= #needle and haystack[:#needle] = needle
}

record TestReport(test_name, status, message) {
	test_name : string = test_name
	status : boolean = status
	message : string = message
}

function doTest(name, code, eout) {
	{
		print("module tmp;import stdlib;\nextern Void puts(Str s);Void println(String s)puts(s.toString());")
		print(line) for line in code
	} | writeLines("tmp.pscript")
	compiler_errors := [{}() | exec(:l, "bash", "-c", "script/compile.sh tmp.pscript 2>&1")]
	if [ not fileExists("etmp") ] do
		{} | exec("mv", "tmp.pscript", "fail.pscript") | {}
		return new TestReport(name, FALSE,
			"Compiler error (try to compile manually)\n" .. [push("    "..err) for err in compiler_errors]&"\n")
	done
	out := [{}() | exec(:l, "./etmp")]
	{} | exec("rm", "tmp.ps", "etmp") | {}
	if [ #out != #eout ] do
		{} | exec("mv", "tmp.c", "fail.c") | {}
		return new TestReport(name, FALSE, "expected "..#eout.." output lines, got "..#out)
	done
	for i in [seq(0,#eout-1)] do
		if [ eout[i] != out[i] ] do
			{} | exec("mv", "tmp.c", "fail.c") | {}
			return new TestReport(name, FALSE, "expected `"..eout[i].."', got `"..out[i].."' (output line "..i..")")
		done
	done
	{} | exec("rm", "tmp.c") | {}
	return new TestReport(name, TRUE, "OK")
}

function colorify(cond, text) {
	push(if [ cond ]
	do [ "\x1b[1;31m" ]
	else [ "\x1b[1;32m" ]
	done .. text .. "\x1b[0m")
}

function inColor(color, text) {
	push("\x1b["..color.."m" .. text .. "\x1b[0m")
}

function main(testfile) {
	results := []
	i := 1
	readLines(testfile) | for line do
		if startsWith("### ", line) do
			name := line[4:]
			code := []
			eout := []
			pull(line)
			until startsWith("==>", line) do
				code += line
				pull(line)
			done
			pull(line)
			until startsWith("---", line) do
				eout += line
				pull(line)
			done
			push("Compiling test "..i.." ("..name..")... ")
			result := doTest(name, code, eout)
			print("["..if[result.status]do["OK"];else[inColor("1;31", "FAILED")]done.."]")
			results += result
			i ++
		else
			error("syntax error: `" .. line .. "'") unless [ line =~ "\\s*" ]
		done
	done
	print(inColor("1;30", "---"))
	i := 1
	succs := 0
	fails := 0
	failtexts := []
	for test in results do
		if [ test.status ] do
			succs ++
		else
			failtexts += "  Test "..i.." ("..test.test_name.."): "..test.message
			fails ++
		done
		i ++
	done
	if [ fails > 0 ] do
		print(inColor("1", "Some tests failed:"))
		print(fail) for fail in failtexts
		print(inColor("1;30", "---"))
	done
	print(inColor("1", "PASSED TESTS: ")..succs..inColor("1", " FAILURES: ")..fails..
		inColor("1", " RATE: ") .. colorify(fails > 0, succs/#results*100//1 .. " %"))
}
