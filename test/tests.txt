### 2+2=4
Void main() {
	println(2 + 2);
}
==>
4
---
### Variable creation
Void main() {
	var i = 2 + 3;
	println(i);
}
==>
5
---
### If statement
Void main() {
	var i = 3*4;
	if (i == 12) println("yeah");
	else println("???");
}
==>
yeah
---
### While statement
Void main() {
	var i = 10;
	while (i > 2) {
		println(i);
		i = i - 1;
	}
}
==>
10
9
8
7
6
5
4
3
---
### Squarable
model Squarable { $ square(); }
extend Int with Squarable { Int square() { return this*this; } }
Void main() {
	println(6.square());
}
==>
36
---
### Squarable&Printable
model Squarable { $ square(); }
extend Int with Squarable { Int square() { return this*this; } }
model Printable { Void print(); }
extend Int with Printable { Void print() { println(this); } }
Void shout(Squarable&Printable p) { p.square().print(); }
Void main() {
	shout(5);
}
==>
25
---
### Matching
enum YesNo {
	Yes,
	No
}
Void main() {
	var a = new YesNo::Yes();
	match (a) {
		Yes -> println("yes");
		No  -> println("no");
	}
}
==>
yes
---
### Maybe
Void main() {
	var a = new Maybe<Int>::Just(3);
	match (a) {
		Just(i) -> println("got: " ++ i);
		Nothing -> println("nothing");
	}
	var b = new Maybe<Int>::Nothing();
	match (b) {
		Just(i) -> println("got: " ++ i);
		Nothing -> println("nothing");
	}
}
==>
got: 3
nothing
---
### Maybe orElse
Void main() {
	var a = new Maybe<Str>::Just(6.toString());
	println(a.orElse("nothing"));
	var b = new Maybe<Str>::Nothing();
	println(b.orElse("nothing"));
}
==>
6
nothing
---
### Maybe orElseGet
Void main() {
	var nothinger = () -> Str { return "nothing"; };
	var a = new Maybe<Str>::Just(7.toString());
	println(a.orElseGet(nothinger));
	var b = new Maybe<Str>::Nothing();
	println(b.orElseGet(nothinger));
}
==>
7
nothing
---
### Function type parameters
@T id<@T>(@T t) { return t; }
Void main() {
	var a = id(11);
	var b = id(22);
	println(a+b);
}
==>
33
---
### Function type parameters v2
@T id<@T>(@T t) { return t; }
Void main() {
	var a = id(id(99));
	var b = id(88);
	println(id(a+b));
}
==>
187
---
### Arrays
Void main() {
	var a = [1, 2, 3];
	var b = [4, 3, 2].append(4);
	b[2] = 5;
	println(a ++ b);
}
==>
[1, 2, 3, 4, 3, 5, 4]
---
### ArrayLists
Void main() {
	var a = new ArrayList<Int> { [3, 2, 1] };
	var b = new ArrayList<Int> { [2, 3, 4] }.append(6);
	a.push(7);
	b[1] = b.remove(2);
	println(a ++ b);
	b.pop();
	b.add(1, 9);
	println(b);
}
==>
ArrayList { [3, 2, 1, 7, 2, 4, 6] }
ArrayList { [2, 9, 4] }
---
### Passing closure
Void apply(Int->Void closure, Int t) {
	closure.call(t);
}
Void main() {
	var text = "printing ";
	var printer = (Int i) -> Void { println(text ++ i); };
	apply(printer, 3);
}
==>
printing 3
---
### Passing closure with type params
Void apply<@T>(@T->Void closure, @T t) {
	closure.call(t);
}
Void main() {
	var text = "printing ";
	var printer = (Int i) -> Void { println(text ++ i); };
	apply(printer, 3);
}
==>
printing 3
---
### Mapper function
Void main() {
	var list = [1, 2, 3];
	var mapper = (Int i) -> Int { return i*i; };
	var printer = (Int i) -> Void { println(i); };
	list | mapper | forAll(printer);
}
==>
1
4
9
---
### Mapper function and copy collector
Void main() {
	var list = [1, 2, 3];
	var mapper = (Int i) -> Int { return i*i; };
	var printer = (Int i) -> Void { println(i); };
	var array = list | mapper | new Int[0].collectToCopy();
	array[1] = 3;
	array | forAll(printer);
}
==>
1
3
9
---
### Mapper function and non-copy collector
Void main() {
	var list = [4, 3, 2];
	var mapper = (Int i) -> Int { return i*i; };
	var printer = (Int i) -> Void { println(i); };
	var array = list | mapper | new ArrayList<Int> { new Int[0] }.collect();
	array[1] = 8;
	array | forAll(printer);
}
==>
16
8
4
---
### Limit
Void main() {
	var list = [1 .. 100];
	var printer = (Int i) -> Void { println(i); };
	list | limit::<Int>(5) | forAll(printer);
}
==>
1
2
3
4
5
---
### Filter
Void main() {
	var list = [1 .. 10];
	var printer = (Int i) -> Void { println(i); };
	var filterer = (Int i) -> Bool { return i%2==0; };
	list | filter(filterer) | forAll(printer);
}
==>
2
4
6
8
10
---
