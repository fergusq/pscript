extern Void printf(Str s, Int i);

Void printInt(Int i) { printf("%d\n", i); }

model Printable {
	Void print();
}

extend Int with Printable {
	Void print() {
		printInt(this);
	}
}

model Squarable {
	$ square();
}

extend Int with Squarable {
	Int square() {
		return this*this;
	}
}

model Duplicable {
	$[] duplicate();
}

extend Int with Duplicable {
	Int[] duplicate() {
		return [this, this];
	}
}

Int[] fromTo(Int from, Int to) {
	var list = new Int[to-from+1];
	var i = 0;
	for (value in list) {
		list[i] = from+i;
		i = i + 1;
	}
	return list;
}

Void shout(Printable&Squarable p) {
	p.square().print();
	p.square().print();
	p.square().print();
}

Void shoutAll(Printable&Squarable[] ps) {
	for (p in ps) shout(p);
}

Void main() {
	var arr = fromTo(1, 4);
	for (i in arr) i.square().print();
	shoutAll(arr);
	shoutAll(10.duplicate());
}
