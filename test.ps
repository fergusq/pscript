extern Void printf(Str s, Int i);
extern Void sprintf(Str to, Str format, Int i);
extern Void puts(Str s);

Void printInt(Int i) { printf("%d\n", i); }

#include "stdlib.ps"

// Printable model

model Printable {
	Void print();
}

extend Int with Printable {
	Void print() {
		printInt(this);
	}
}

extend Str with Printable {
	Void print() {
		puts(this);
	}
}

extend String with Printable {
	Void print() {
		this.toString().print();
	}
}

// Squarable model

model Squarable {
	$ square();
}

extend Int with Squarable {
	Int square() {
		return this*this;
	}
}

// Duplicable model

model Duplicable {
	$[] duplicate();
}

extend Int with Duplicable {
	Int[] duplicate() {
		return [this, this];
	}
}

// Pipe models

model PipeOutput<@T> {
	Void operator |(PipeInput<@T> pipe);
}

model PipeInput<@T> {
	Void consume(@T t);
}

extend Array<@T> with PipeOutput<@T> {
	Void operator |(PipeInput<@T> pipe) {
		for (element in this) {
			pipe.consume(element);
		}
	}
}

extend Int with PipeInput<Int> {
	Void consume(Int i) {
		(this*i).print();
	}
}

const struct Printer<@T> { }

extend Printer<@T> with PipeInput<@T> {
	Void consume(@T s) {
		("-> "+s).print();
	}
}

//

Int[] fromTo(Int from, Int to) {
	var array = new Int[to-from+1];
	var i = 0;
	for (value in array) {
		array[i] = from+i;
		i = i + 1;
	}
	return array;
}

Void shout(Printable&Squarable p) {
	p.square().print();
	p.square().print();
	p.square().print();
}

Void shoutAll(Printable&Squarable[] ps) {
	for (p in ps) shout(p);
}

Void main() {
	var arr = fromTo(1, 4.append(2));
	for (i in arr) i.square().print();
	shoutAll(arr);
	shoutAll(10.duplicate());
	"---".print();
	"---".size().print();
	[1,2,3].size().print();
	[1,2,3].append(1) | 4;
	//[[1],[2],[3]] | new Printer<Int[]> {};
	var list = new List<Int> { [1, 2, 3] };
	list.add(99);
	list::elements | new Printer<Int> {};
}
